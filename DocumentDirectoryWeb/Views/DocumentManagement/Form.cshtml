@model Document

@{
    bool isEdit = ViewBag.Edit;
    ViewData["Title"] = (isEdit ? "Редактирование" : "Создание") + " документа";
}

<div class="modal-dialog modal-dialog-centered modal-lg">
    <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title" id="convertModalLabel">@ViewData["Title"]</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>

        <div class="modal-body">
            <div id="formAlert" class="alert alert-danger" role="alert" style="display: none;">[TextContent]</div>

            <form id="convertForm" enctype="multipart/form-data" method="post">
                @Html.Hidden("Id", Model.Id)
                @Html.Hidden("IsEdit", isEdit)

                <div class="mb-3">
                    <label class="form-label" asp-for="Name"></label>
                    <textarea class="form-control" rows="8" asp-for="Name"></textarea>
                    <span class="text-danger" asp-validation-for="Name"></span>
                </div>

                <div class="mb-3">
                    <label class="form-label" asp-for="CategoryId"></label>
                    @Html.DropDownListFor(
                        item => item.CategoryId,
                        new SelectList(ViewBag.Categories, "Id", "Name"),
                        new { @class = "form-select" })
                    <span class="text-danger" asp-validation-for="CategoryId"></span>
                </div>

                <div class="mb-3">
                    <input class="form-control" type="file" name="file" id="fileInput" accept=".pdf,.docx">
                    <div id="errorFile" class="text-danger" style="display: none;">Разрешены только файлы PDF и DOCX.</div>
                </div>
            </form>
        </div>

        <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Закрыть</button>
            <button type="button" class="btn btn-primary" onclick="saveAndConvert()" id="saveButton">Сохранить</button>
        </div>
    </div>
</div>

<div id="spinner" class="spinner-border" role="status">
    <span class="visually-hidden">Loading...</span>
</div>

<script>
    function saveAndConvert() {
        $('#formAlert').hide();

        let formData = getFormData();
        
        if (!formData) {
            return;
        }
        
        $("#spinner").show();
        disableButton();
    
        // Отправка данных на сервер с помощью AJAX
        $.ajax({
          url: '/DocumentManagement/SaveItem',
          type: 'POST',
          data: formData,
          processData: false,
          contentType: false,
          success: function (response) {
            // Обработка успешного ответа от сервера
            console.log(response);
            // Закрываем окно, перезагружаем страницу
            $('#modalWindow').modal('hide');
            $("#spinner").hide();
            enableButton();
            location.reload();
          },
          error: function (xhr, status, error) {
            // Обработка ошибки
            console.log('Error:', error);
            $("#spinner").hide();
            enableButton();
            alert("Произошла ошибка при загрузке данных.");
          }
        });
    }
    
    function getFormData() {
        // Получение значений из полей
        const id = $('#Id').val();
        const isEdit = convertToJSBool($('#IsEdit').val());
        const name = $('#Name').val();
        
        if (!name) {
            let formAlert = $('#formAlert');
            formAlert.text('Поля неправильно заполнены!');
            formAlert.show();
            return null;
        }
        
        const categoryId = $('#CategoryId').val();
        const fileInput = $('#fileInput')[0];
        const file = fileInput.files[0];
        const filePath = fileInput.value;
        
        if (!isEdit && !file) {
            $('#errorFile').show();
            return null;
        }
        
        const allowedExtensions = /(\.pdf|\.docx)$/i;

        if (file && !allowedExtensions.exec(filePath)) {
            $('#errorFile').show();
            return null;
        }
        
        // Создание объекта FormData для передачи данных формы
        let formData = new FormData();
        formData.append('id', id);
        formData.append('name', name);
        formData.append('categoryId', categoryId);
        formData.append('file', file);
        formData.append('isEdit', isEdit);
        
        return formData;
    }
    
    function disableButton() {
        // Блокировка кнопки
        document.getElementById("saveButton").setAttribute("disabled", "disabled");
    }
    
    function enableButton() {
        // Разблокировка кнопки
        document.getElementById("saveButton").removeAttribute("disabled");
    }
</script>